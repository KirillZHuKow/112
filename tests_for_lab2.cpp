void testall(){
    cout << "Проверка Linked List" << endl;
    cout << "Проверка конструкторов" << endl;
    int testdata[4]= {1 ,2, 3,4};
    LinkedList<int> testList;
    LinkedList<int> Sublist;
    testList.append(1);
    testList.append(2);
    testList.append(3);
    testList.append(4);
    assert(testList[0] == 1);
    assert(testList[1] == 2);
    assert(testList[2] == 3);
    assert(testList[3] == 4);
    LinkedList<int> testList2(testList);
    assert(testList2[0] == 1);
    assert(testList2[1] == 2);
    assert(testList2[2] == 3);
    assert(testList2[3] == 4);
    LinkedList<int> testList3(testdata, 4);
    assert(testList3[0] == 1);
    assert(testList3[1] == 2);
    assert(testList3[2] == 3);
    assert(testList3[3] == 4);
    cout << "Проверка методов" << endl;
    assert(testList.getSize() == 4);
    testList.set(0,3);
    assert(testList[0] == 3);
    testList.prepend(10);
    assert(testList[0] == 10);
    assert(testList.getFirst() == 10);
    assert(testList.getLast() == 4);
    testList.map(mapint, 2);
    assert(testList[0] == 20);
    assert(testList[1] == 6);
    assert(testList[2] == 4);
    assert(testList[3] == 6);
    assert(testList[4] == 8);
    testList.subSequence(0, 4, &Sublist);
    assert(testList[0] == 20);
    assert(testList[1] == 6);
    assert(testList[2] == 4);
    assert(testList[3] == 6);
    assert(testList[4] == 8);
    testList.where(whereint, 7);
    assert(testList[0] == 20);
    assert(testList[1] == 8);
    testList.deleteOne(0);
    assert(testList[0] == 8);

    cout << "Проверка DynamicArray" << endl;
    cout << "Проверка конструкторов" << endl;
    LinkedList<int> testArray;
    LinkedList<int> Sub;
    testArray.append(1);
    testArray.append(2);
    testArray.append(3);
    testArray.append(4);
    assert(testArray[0] == 1);
    assert(testArray[1] == 2);
    assert(testArray[2] == 3);
    assert(testArray[3] == 4);
    LinkedList<int> testArray2(testArray);
    assert(testArray2[0] == 1);
    assert(testArray2[1] == 2);
    assert(testArray2[2] == 3);
    assert(testArray2[3] == 4);
    LinkedList<int> testArray3(testdata, 4);
    assert(testArray3[0] == 1);
    assert(testArray3[1] == 2);
    assert(testArray3[2] == 3);
    assert(testArray3[3] == 4);
    cout << "Проверка методов" << endl;
    assert(testArray.getSize() == 4);
    testArray.set(0,3);
    assert(testArray[0] == 3);
    testArray.prepend(10);
    assert(testArray[0] == 10);
    assert(testArray.getFirst() == 10);
    assert(testArray.getLast() == 4);
    testArray.map(mapint, 2);
    assert(testArray[0] == 20);
    assert(testArray[1] == 6);
    assert(testArray[2] == 4);
    assert(testArray[3] == 6);
    assert(testArray[4] == 8);
    testArray.subSequence(0, 4, &Sub);
    assert(testArray[0] == 20);
    assert(testArray[1] == 6);
    assert(testArray[2] == 4);
    assert(testArray[3] == 6);
    assert(testArray[4] == 8);
    testArray.where(whereint, 7);
    assert(testArray[0] == 20);
    assert(testArray[1] == 8);
    testArray.deleteOne(0);
    assert(testArray[0] == 8);

   